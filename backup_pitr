#!/bin/bash

# vars
backup_root=/home/pgsql/pitr
pgdata=/home/pgsql/postgresql-8.2.21/data

label_prefix=`basename $0`
current_time=`date +%Y.%m.%d-%H.%M.%S`

psql_command="psql"
psql_condb="postgres"


stop_backup() {
    trap '' INT TERM EXIT

    $psql_command -Atc "SELECT pg_stop_backup();" $psql_condb
    if [ $? != 0 ]; then
	echo "ERROR: could not stop backup process" 1>&2
        exit 1
    fi

    trap - INT TERM KILL EXIT
}

# Prepare target directoties
backup_dir=$backup_root/${label_prefix}/${current_time}
mkdir -p $backup_dir
mkdir -p $backup_dir/tblspc
mkdir -p $backup_dir/xlog

# Start backup
start_pos=`$psql_command -Atc "SELECT pg_start_backup('${label_prefix}_${current_time}');" $psql_condb`
if [ $? != 0 ]; then
    echo "ERROR: could not start backup process" 1>&2
    exit 1
fi

# Add a signal handler to avoid leaving the cluster in backup mode when exiting
trap stop_backup INT TERM KILL EXIT

start_xlog=`$psql_command -Atc "SELECT pg_xlogfile_name('${start_pos}');" $psql_condb`
if [ $? != 0 ]; then
    echo "ERROR: could not get xlog file name from backup start position" 1>&2
    exit 1
fi

# Copy the backup label
cp $pgdata/backup_label $backup_dir
if [ $? != 0 ]; then
    echo "ERROR: could not copy backup_label to backup store" 1>&2
    exit 1
fi

# Tar everything
cd $pgdata
tar -cpf - --ignore-failed-read --exclude=pg_xlog * 2>/dev/null | gzip > $backup_dir/pgdata.tar.gz
rc=(${PIPESTATUS[*]})
tar_rc=${rc[0]}
gzip_rc=${rc[1]}
if [ $tar_rc = 2 ] || [ $gzip_rc != 0 ]; then
    echo "ERROR: could not tar PGDATA" 1>&2
    exit 1
fi

# Tar tplspc

# Stop backup
stop_backup

# Copy the backup history file
cp $pgdata/pg_xlog/${start_xlog}.*.backup $backup_dir/

# move xlogs to the store