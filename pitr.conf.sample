# pitr.conf -- central configuration file for pitrery
#
# This file is intended to be copied for each backup set to be
# performed with pitrery.
#
# Since pitr_migr is a wrapper for the different scripts that do each
# action, all options are defined here so that the command line stays
# short.  All options defined here can be overridden on the command
# line by specifying the options after the name of the action.

####################
# Backup management
####################

# Specify all needed information to be able to run SQL command on the
# PostgreSQL cluster to backup.  Those options can be commented out to
# let the scripts use the ones defined in the environment (be careful
# with cron when doing this)
PGDATA="/var/lib/pgsql/data"
PGPSQL="psql"
PGUSER="postgres"
PGPORT=5432
PGHOST="/tmp"
PGDATABASE="postgres"
PGOWNER=$PGUSER

# If the transaction logs directory is outside PGDATA (see -X option
# of initdb), specify its path here to recreate the symbolic link when
# restoring.
PGXLOG=

# BACKUP_IS_LOCAL permits to store the backups on the local machine.
# When it is set to "yes", a target host is no longer required
BACKUP_IS_LOCAL="no"

# Directory where to store the files.  Each backup has its own
# subdirectory named after the date and time it was launched.
BACKUP_DIR="/var/lib/pgsql/backups"

# Define a name for the backup set.  Every backup will be stored in
# $BACKUP_DIR/$BACKUP_LABEL, which should make thing easier to find
# when storing backups for several servers in the same place.
BACKUP_LABEL="pitr"

# When performing non local backups, a target host with a batch SSH
# access is needed (e.g. create passwordless SSH key pairs).  Be aware
# that commands will be run by the scripts through SSH, so this should
# be allowed. Only specify an IP address here.
BACKUP_HOST=

# User to use when accessing BACKUP_HOST through SSH.  If blank, the
# login will be performed with the default SSH configuration.
BACKUP_USER=

# After restoring from a backup, PostgreSQL will need a command to run
# to get archived WAL segments that needed to be replayed on the
# cluster files.  This can be any valid command or script for the
# restore_command parameter of PostgreSQL (in recovry.conf).  The
# restore_xlog script is intended to be used here: leave empty to use it
RESTORE_COMMAND=

# The old backups can be removed by setting one of those two
# parameters, one can keep at most PURGE_KEEP_COUNT backups or keep
# backups that are younger than PURGE_OLDER_THAN in days. When both
# parameters are set, age based purge keeps at least the given count.
PURGE_KEEP_COUNT=
PURGE_OLDER_THAN=

# Hooks. Command run at some point in the different actions
PRE_BACKUP_COMMAND=
POST_BACKUP_COMMAND=

# Backup storage method. "tar" creates one compressed tarball (with
# gzip) for PGDATA and each tablespace. "rsync" synchronizes PGDATA
# and each tablespace and try to optimize data transfer by hardlinking
# the previous backup (provided it was done with the "rsync"
# method). Use "tar" if space for the backup matters more than speed,
# use "rsync" if speed is more important.
STORAGE="tar"

# Timestamp the messages.
LOG_TIMESTAMP="no"

####################
# WAL archiving
####################

# Local copy
ARCHIVE_LOCAL="no"

# The host storing the archiced WAL files. If left empty, use restore
# archives from the local machine
ARCHIVE_HOST=

# The user for login to ARCHIVE_HOST through SSH. If blank, target
# owner is used
ARCHIVE_USER=

# The directory where to look for archived WAL files on BACKUP_HOST.
ARCHIVE_DIR="/var/lib/pgsql/archived_xlog"

# Compress the WAL segment
ARCHIVE_COMPRESS="yes"

# Logging options.  When SYSLOG is no, messages are written to stderr,
# to allow the logging collector or redirection to catch them. These
# parameters are intended to match their counterparts in
# postgresql.conf
SYSLOG="no"
SYSLOG_FACILITY="local0"
SYSLOG_IDENT="postgres"

####################
# Compression
####################

# The following options allow to customize compression tools for WAL
# archiving. The program used in COMPRESS_BIN must support a -c option
# to output to stdout and access data from stdin (tested with gzip, pigz,
# bzip2, pbzip2).  Defaults to "gzip -4"
#COMPRESS_BIN=

# The suffix added by the compression tool (needed for
# decompression). Defaults to "gz"
#COMPRESS_SUFFIX=

# Path to the decompression program, it must take the file to process
# as its first parameter. Defaults to "gunzip"
#UNCOMPRESS_BIN=

# The compression used with the "tar" storage method can be configured
# with these options. The command must be able to be used with
# pipes (tested with gzip, pigz, bzip2, pbzip2). Defaults to "gzip -4".
#BACKUP_COMPRESS_BIN=

# The suffix added by the compression tool (needed for
# decompression). Defaults to "gz".
#BACKUP_COMPRESS_SUFFIX=

# Path to the decompression program for backup using the "tar" storage
# method, it must take the file to process as its first parameter,
# work with pipes and be able output to stdout with -c. Defaults to
# "gunzip".
#BACKUP_UNCOMPRESS_BIN=

####################

# Internal
# Change scripts_dir to point to the directory storing
# the *_pitr scripts if needed, this should be well handled by the
# Makfile.
#scripts_dir=@LIBDIR@
